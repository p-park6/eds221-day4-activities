---
title: "eds221-day4-tasks"
format: html
editor: visual
---

Create two sequences, one called weekdays that contains days of the week (“Monday”, “Tuesday”, “Wednesday”, etc.) and one called transects that contains the series of transect names “Transect A”, “Transect B,”Transect C”. Write a nested for loop that creates a matrix containing the following:

# Task 1

```{r}

weekdays <- c("Monday", "Tuesday", "Wednesday", "Thrusday", "Friday", "Saturday", "Sunday")
transects <- c("Transect A", "Transect B", "Transect C")

matrix_week_trans <- matrix(nrow = length(weekdays), ncol = length(transects))

#week_trans_df <- function(weekdays, transects) {
  for(i in seq_along(transects)) {
    for(j in seq_along(weekdays)) {
    print_week_trans <- print(paste(weekdays[j], "and", transects[i]))
    matrix_week_trans[j, i] <- print_week_trans
  }
}

test<-data.frame(matrix_week_trans)
view(test)


#week_trans_df()
#  for(i in seq_along(transects))
#    for(j in seq_along(weekdays)) {
#if(i in seq_along(transects))
```



Write a function called force that calculates a force (in Newtons), given inputs of mass (in kg) and acceleration (in ms2 (recall: F=ma), and returns a statement “The resulting force is ___ Newtons.”

# task 2

```{r}
find_force <- function(mass, acceleration) {
  force <- (mass * acceleration)
  print(force)
}
find_force(12, 15)
```


Recreate the table above as a data frame stored as fish_parms. Then, write a function called fish_weight that allows a user to only enter the common name (argument fish_name) and total length (argument tot_length) (in centimeters) of a fish, to return the expected fish weight in grams. Test it out for different species and lengths.

Now, try creating a vector of lengths (e.g. 0 to 100, by increments of 1) and ensuring that your function will calculate the fish weight over a range of lengths for the given species (try this for milkfish, storing the output weights as milkfish_weights.

# Task 3

```{r}
fish_parms <- data.frame(sci_name = c("Chanos chanos", "Sphyraena barracuda", "Caranx ignobilis"), 
                         common_name = c("Milkfish", "Great barracuda", "Giant trevally"), 
                         a_est = c(0.0905, 0.0181, 0.0353), 
                         b_est = c(2.52, 3.27, 3.05))

fish_weight <- function(fish_name, tot_length) {
  fish_subset <- dplyr::filter(fish_parms, common_name == fish_name) 
    weight_formula <- (fish_subset$a_est * (tot_length ^ fish_subset$b_est))
    print(weight_formula)
}

fish_weight("Milkfish",52)
```


Wave power (more accurately wave energy flux) in deep water is approximated by:

Pdeep=0.5H2T
where P is power in kWm (potential power per wave meter), H is wave height in meters (more specifically, the significant wave height), and T

is the wave period in seconds. Learn more here.

Write a function called wave_power that calculates potential ocean wave power given inputs of wave height and period.

Use your wave_power function to approximate wave power for a period of 8 seconds, over a range of wave heights from 0 to 3 meters by increments of 0.2 meters.

#Task 4

```{r}

height_seq <- seq(from = 0, to = 3, by = 0.2)
period_seq <- seq(from = 0, to = 8, by = 1)

wave_vector <- vector(mode = "numeric", length = length(period_seq))
  
for(i in 1:length(period_seq)) {
  pot_ow_p <- 0.5 * (height_seq ^2) * period_seq
  wave_vector <- pot_ow_p
}

wave_vector

wave_vector_2 <- vector(mode = "numeric", length = length(height_seq))
  
for(i in 1:length(height_seq)) {
  pot_ow_p_2 <- 0.5 * (height_seq ^2) * period_seq
  wave_vector_2 <- pot_ow_p_2
}

wave_vector_2

# wave_matrix <- matrix(nrow = length(height_seq), ncol = length(period_seq))
#   
# for (i in 1:length(height_seq)) {
#   for(j in 1:length(period_seq)) {
#  #   wave_power <- function(height_seq, period_seq) {
#   pot_ow_p <- 0.5 * (height_seq ^2) * period_seq
#   print(pot_ow_p)
# #  }
#   }
# }
#     

wave_power <- function(height, 
                       period, 
                       depth) {
  if(depth > 12) {
    message("You are using the shallow depth equation")
  0.81 * (height ^ 2) * period 
  } else if(depth <= 12) {
    message("You are using the deep depth equation")
  0.5 * (height ^2) * period 
  }
}
wave_power(13, 25, 32)
wave_power(13, 25, 5)

# #wave_power()
#     
#    # wave_matrix[j,i] <- pot_ow_p
#     
# wave_power()
```




task 4 does not require making a for loop


